{
  "circa": {
    "title": "Astaria contest",
    "sponsor": "Astaria",
    "slug": "2023-01-astaria",
    "date": "2023-05-22",
    "findings": "https://github.com/code-423n4/2023-01-astaria-findings/issues",
    "contest": 202
  },
  "html": "im me",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overviewsc4</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-21\">High Risk Findings (21)</a></p>\n<ul>\n<li><a href=\"#h-01-lientoken-lender-and-liquidator-can-collude-to-block-auction-and-seize-collateral\">[H-01] <code>LienToken</code>: Lender and liquidator can collude to block auction and seize collateral</a></li>\n<li><a href=\"#h-02-erc4626cloned-deposit-and-mint-logic-differ-on-first-deposit\">[H-02] ERC4626Cloned deposit and mint logic differ on first deposit</a></li>\n<li><a href=\"#h-03-improper-validations-in-clearinghouse-possible-to-lock-collateral-nft-in-contract\">[H-03] Improper validations in Clearinghouse, possible to lock collateral NFT in contract</a></li>\n<li><a href=\"#h-04-strategist-can-fail-to-withdraw-asset-token-from-a-private-vault\">[H-04] Strategist can fail to withdraw asset token from a private vault</a></li>\n<li><a href=\"#h-05-vault-may-be-drained-after-a-liquidated-nft-was-claimed-by-the-liquidator\">[H-05] Vault may be drained after a liquidated NFT was claimed by the liquidator</a></li>\n<li><a href=\"#h-06-buying-out-corrupts-the-slope-of-a-vault-reducing-rewards-of-lps\">[H-06] Buying out corrupts the slope of a vault, reducing rewards of LPs</a></li>\n<li><a href=\"#h-07-malicious-refinancing-attack-could-lead-to-suboptimal-nft-liquidation\">[H-07] Malicious refinancing attack could lead to suboptimal NFT liquidation</a></li>\n<li><a href=\"#h-08-lack-of-strategydetailsparamvault-validation-allows-the-borrower-to-steal-all-the-funds-from-the-vault\">[H-08] Lack of StrategyDetailsParam.vault validation allows the borrower to steal all the funds from the vault</a></li>\n<li><a href=\"#h-09-at-the-second-time-the-nft-is-used-as-collateral-to-take-a-loan-the-debt-repayment-via-auction-fund-can-be-failed-when-liquidation-\">[H-09] At the second time the nft is used as collateral to take a loan, the debt repayment via auction fund can be failed when liquidation </a></li>\n<li><a href=\"#h-10-liquidation-will-fail-if-value-set-as-liquidationinitialask--288-1-causing-collateral-to-be-permanently-locked\">[H-10] Liquidation will fail if value set as <code>liquidationInitialAsk</code> > <code>2**88-1</code>, causing collateral to be permanently locked</a></li>\n<li><a href=\"#h-11-malicious-strategist-could-deny-borrowers-from-repaying-loan-and-force-liquidation-by-setting-a-extremely-high-vault-fee\">[H-11] Malicious strategist could deny borrowers from repaying loan and force liquidation by setting a extremely high vault fee</a></li>\n<li><a href=\"#h-12-borrower-can-use-liquidationinitialask-to-block-future-borrowers\">[H-12] Borrower can use liquidationInitialAsk to block future borrowers</a></li>\n<li><a href=\"#h-13-anyone-can-wipe-complete-state-of-any-collateral-at-any-point\">[H-13] Anyone can wipe complete state of any collateral at any point</a></li>\n<li><a href=\"#h-14-a-malicious-private-vault-can-preempt-the-creation-of-a-public-vault-by-transferring-lien-tokens-to-the-public-vault-thereby-preventing-the-borrower-from-repaying-all-loans\">[H-14] A malicious private vault can preempt the creation of a public vault by transferring lien tokens to the public vault, thereby preventing the borrower from repaying all loans</a></li>\n<li><a href=\"#h-15-wrong-starting-price-when-listing-on-seaport-for-assets-that-has-less-than-18-decimals\">[H-15] Wrong starting price when listing on Seaport for assets that has less than 18 decimals</a></li>\n<li><a href=\"#h-16-when-public-vault-a-buys-out-public-vault-bs-lien-tokens-it-does-not-increase-public-vault-as-liensopenforepoch-which-would-result-in-the-lien-tokens-not-being-repaid\">[H-16] When Public Vault A buys out Public Vault B’s lien tokens, it does not increase Public Vault A’s liensOpenForEpoch, which would result in the lien tokens not being repaid</a></li>\n<li><a href=\"#h-17-function-processepoch-in-publicvault-would-revert-when-most-of-the-users-withdraw-their-funds-because-of-the-underflow-for-new-yintercept-calculation\">[H-17] Function <code>processEpoch()</code> in PublicVault would revert when most of the users withdraw their funds because of the underflow for new yIntercept calculation</a></li>\n<li><a href=\"#h-18-publicvaultprocessepoch-calculates-withdrawreserve-incorrectly-users-can-lose-funds\">[H-18] <code>PublicVault.processEpoch</code> calculates <code>withdrawReserve</code> incorrectly; Users can lose funds</a></li>\n<li><a href=\"#h-19-vaults-dont-verify-that-a-strategys-deadline-has-passed\">[H-19] Vaults don’t verify that a strategy’s deadline has passed</a></li>\n<li><a href=\"#h-20-deadlock-in-vaults-with-underlying-token-with-less-then-18-decimals\">[H-20] Deadlock in vaults with underlying token with less then 18 decimals</a></li>\n<li><a href=\"#h-21-attacker-can-take-loan-for-victim\">[H-21] Attacker can take loan for Victim</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-34\">Medium Risk Findings (34)</a></p>\n<ul>\n<li><a href=\"#m-01-a-user-can-use-the-same-proof-for-a-commitment-more-than-1-time\">[M-01] A user can use the same proof for a commitment more than 1 time</a></li>\n<li><a href=\"#m-02-_buyoutlien-does-not-properly-validate-the-liquidationinitialask\">[M-02] <code>_buyoutLien()</code> does not properly validate the liquidationInitialAsk</a></li>\n<li><a href=\"#m-03-settleauction-check-for-status-errors\">[M-03] <code>settleAuction()</code> Check for status errors</a></li>\n<li><a href=\"#m-04-lientokentransferfrom-there-is-a-possibility-of-malicious-attack\">[M-04] <code>LienToken.transferFrom</code> There is a possibility of malicious attack</a></li>\n<li><a href=\"#m-05-users-are-unable-to-mint-shares-from-a-public-vault-using-astariarouter-contract-when-share-price-is-bigger-than-one\">[M-05] Users are unable to mint shares from a public vault using <code>AstariaRouter</code> contract when share price is bigger than one</a></li>\n<li><a href=\"#m-06-for-a-public-vault-minimum-deposit-requirement-that-is-enforced-by-erc4626cloneddeposit-function-can-be-bypassed-by-erc4626clonedmint-function-or-vice-versa-when-share-price-does-not-equal-one\">[M-06] For a public vault, minimum deposit requirement that is enforced by <code>ERC4626Cloned.deposit</code> function can be bypassed by <code>ERC4626Cloned.mint</code> function or vice versa when share price does not equal one</a></li>\n<li><a href=\"#m-07-improper-approval-mechanism-of-clearing-house\">[M-07] Improper Approval Mechanism of Clearing House</a></li>\n<li><a href=\"#m-08-public-vault-strategist-reward-is-not-calculated-correctly\">[M-08] Public vault strategist reward is not calculated correctly</a></li>\n<li><a href=\"#m-09-tokens-with-fee-on-transfer-are-not-supported-in-publicvaultsol\">[M-09] Tokens with fee on transfer are not supported in <code>PublicVault.sol</code></a></li>\n<li><a href=\"#m-10-public-vault-slope-can-overflow\">[M-10] Public vault slope can overflow</a></li>\n<li><a href=\"#m-11-liquidator-reward-is-not-taken-into-account-when-calculating-potential-debt\">[M-11] Liquidator reward is not taken into account when calculating potential debt</a></li>\n<li><a href=\"#m-12-yintercept-of-public-vaults-can-overflow\">[M-12] yIntercept of public vaults can overflow</a></li>\n<li><a href=\"#m-13-processing-an-epoch-must-be-done-in-a-timely-manner-but-can-be-halted-by-non-liquidated-expired-liens\">[M-13] Processing an epoch must be done in a timely manner, but can be halted by non liquidated expired liens</a></li>\n<li><a href=\"#m-14-mindepositamount-is-unnecessarily-high-can-price-out-many-users\">[M-14] <code>minDepositAmount</code> is unnecessarily high, can price out many users</a></li>\n<li><a href=\"#m-15-overflow-potential-in-processepoch\">[M-15] Overflow potential in processEpoch()</a></li>\n<li><a href=\"#m-16-withdrawproxy-allows-redeem-to-be-called-before-withdraw-reserves-are-transferred-in\">[M-16] WithdrawProxy allows <code>redeem()</code> to be called before withdraw reserves are transferred in</a></li>\n<li><a href=\"#m-17-position-not-deleted-after-debt-paid\">[M-17] Position not deleted after debt paid</a></li>\n<li><a href=\"#m-18-public-vault-owner-strategist-can-use-buyoutlien-to-indefinitely-prevent-liquidity-providers-from-withdrawing\">[M-18] Public vault owner (strategist) can use buyoutLien to indefinitely prevent liquidity providers from withdrawing</a></li>\n<li><a href=\"#m-19-users-are-forced-to-approve-router-for-full-collection-to-use-committoliens-function\">[M-19] Users are forced to approve Router for full collection to use commitToLiens() function</a></li>\n<li><a href=\"#m-20-users-can-liquidate-themselves-before-others-allowing-them-to-take-13-above-their-borrowers\">[M-20] Users can liquidate themselves before others, allowing them to take 13% above their borrowers</a></li>\n<li><a href=\"#m-21-when-a-private-vault-offers-a-loan-in-erc777-tokens-the-private-vault-can-refuse-to-receive-repayment-in-the-safetransferfrom-callback-to-force-liquidation-of-the-borrowers-collateral\">[M-21] When a private vault offers a loan in ERC777 tokens, the private vault can refuse to receive repayment in the safeTransferFrom callback to force liquidation of the borrower’s collateral</a></li>\n<li><a href=\"#m-22-erc4626routerbasewithdraw-can-only-be-called-once\">[M-22] <code>ERC4626RouterBase.withdraw</code> can only be called once</a></li>\n<li><a href=\"#m-23-function-withdraw-and-redeem-in-erc4626routerbase-would-revert-always-because-they-have-unnecessary-allowance-setting\">[M-23] Function <code>withdraw()</code> and <code>redeem()</code> in ERC4626RouterBase would revert always because they have unnecessary allowance setting</a></li>\n<li><a href=\"#m-24-flashauction-doesnt-pass-the-initiator-to-the-recipient-\">[M-24] FlashAuction doesn’t pass the initiator to the recipient </a></li>\n<li><a href=\"#m-25-vault-can-be-created-for-not-yet-existing-erc20-tokens-which-allows-attackers-to-set-traps-to-steal-nfts-from-borrowers\">[M-25] Vault can be created for not-yet-existing ERC20 tokens, which allows attackers to set traps to steal NFTs from Borrowers</a></li>\n<li><a href=\"#m-26-collateraltoken-should-allow-to-execute-token-owners-action-to-approved-addresses\">[M-26] CollateralToken should allow to execute token owner’s action to approved addresses</a></li>\n<li><a href=\"#m-27-approved-operator-of-collateral-owner-cant-liquidate-lien\">[M-27] Approved operator of collateral owner can’t liquidate lien</a></li>\n<li><a href=\"#m-28-lack-of-support-for-erc20-token-that-is-not-18-decimals\">[M-28] Lack of support for ERC20 token that is not 18 decimals</a></li>\n<li><a href=\"#m-29-publicvaultprocessepoch-updates-yintercept-incorrectly-when-totalassets--expected\">[M-29] <code>PublicVault.processEpoch</code> updates <code>YIntercept</code> incorrectly when <code>totalAssets() &#x3C;= expected</code></a></li>\n<li><a href=\"#m-30-adversary-can-game-the-liquidation-flow-by-transfering-a-dust-amount-of-the-payment-token-to-clearinghouse-contract-to-settle-the-auction-if-no-one-buy-the-auctioned-nft\">[M-30] Adversary can game the liquidation flow by transfering a dust amount of the payment token to ClearingHouse contract to settle the auction if no one buy the auctioned NFT</a></li>\n<li><a href=\"#m-31-lientoken_payment-function-increases-users-debt\">[M-31] <code>LienToken._payment</code> function increases users debt</a></li>\n<li><a href=\"#m-32-certain-function-can-be-blocked-if-the-erc20-token-revert-in-0-amount-transfer-after-publicvaulttransferwithdrawreserve-is-called\">[M-32] Certain function can be blocked if the ERC20 token revert in 0 amount transfer after <code>PublicVault#transferWithdrawReserve</code> is called</a></li>\n<li><a href=\"#m-33-lack-of-support-for-fee-on-transfer-token\">[M-33] Lack of support for fee-on-transfer token</a></li>\n<li><a href=\"#m-34-pause-checks-are-missing-on-deposit-for-private-vault\">[M-34] Pause checks are missing on deposit for Private Vault</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#01-lack-of-reasonable-boundary-for-parameter-setting-in-fee-setting-and-liquidation-auction-length-and-refinance-setting-and-epoch-length\">[01] Lack of reasonable boundary for parameter setting in fee setting and liquidation auction length and refinance setting and epoch length</a></li>\n<li><a href=\"#02-new-protocol-parameter-setting-should-not-be-applied-to-old-loan-term-and-state-especially-the-fee-setting\">[02] New Protocol parameter setting should not be applied to old loan term and state, especially the fee setting</a></li>\n<li><a href=\"#03-adversary-can-game-the-flashauction-feature-to-block-further-flashauction-after-trading-collateral-token-and-make-liquidatornftclaim-function-revert-and-block-liquidation-if-the-nft-is-moonbird\">[03] Adversary can game the flashAuction feature to block further flashAuction after trading collateral token and make liquidatorNFTClaim function revert and block liquidation if the NFT is Moonbird</a></li>\n<li><a href=\"#04-if-an-auction-has-no-bidder-the-nft-ownership-should-go-back-to-the-loan-lenders-instead-of-liquidator\">[04] If an auction has no bidder, the NFT ownership should go back to the loan lenders instead of liquidator</a></li>\n<li><a href=\"#05-security-hook-should-not-be-set-for-a-nft-that-is-not-uniswap-v3-position-nft\">[05] Security hook should not be set for a NFT that is not Uniswap V3 Position NFT</a></li>\n<li><a href=\"#06-lack-of-support-for-erc1155-nft\">[06] Lack of support for ERC1155 NFT</a></li>\n<li><a href=\"#07-certain-function-should-not-be-marked-as-payable-otherwise-the-eth-that-mistakenly-sent-along-with-the-function-call-is-locked-in-the-contract\">[07] Certain function should not be marked as payable, otherwise the ETH that mistakenly sent along with the function call is locked in the contract</a></li>\n<li><a href=\"#08-transaction-revert-in-division-by-zero-error-when-handling-protocol-fee-if-the-feeto-address-is-set-but-sprotocolfeedenominator-is-not-set\">[08] Transaction revert in division by zero error when handling protocol fee if the feeTo address is set but <code>s.protocolFeeDenominator</code> is not set</a></li>\n<li><a href=\"#09-should-use-_safemint-instead-of-mint-in-collateraltokenonerc721received\">[09] Should use <code>_safeMint</code> instead of mint in CollateralToken#onERC721Received</a></li>\n<li><a href=\"#10-adversary-can-front-run-admins-state-update-and-parameter-update\">[10] Adversary can front-run admin’s state update and parameter update</a></li>\n<li><a href=\"#11-solmate-safetransfer-and-safetransferfrom-does-not-check-the-codesize-of-the-token-address-which-may-lead-to-fund-loss\">[11] Solmate safeTransfer and safeTransferFrom does not check the codesize of the token address, which may lead to fund loss</a></li>\n<li><a href=\"#12-compromised-owner-is-capable-of-draining-all-users-fund-after-user-gives-token-allowance-to-transferproxysol\">[12] Compromised owner is capable of draining all user’s fund after user gives token allowance to TransferProxy.sol</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#overview-1\">Overview</a></li>\n<li><a href=\"#g-01-pack-structs-by-putting-variables-that-can-fit-together-next-to-each-other\">G-01 Pack structs by putting variables that can fit together next to each other</a></li>\n<li><a href=\"#g-02-the-result-of-a-function-call-should-be-cached-rather-than-re-calling-the-function\">G-02 The result of a function call should be cached rather than re-calling the function</a></li>\n<li><a href=\"#g-03-internalprivate-functions-only-called-once-can-be-inlined-to-save-gas-gas-saved-20--20--400\">G-03 Internal/Private functions only called once can be inlined to save gas <code>Gas saved: 20 * 20 = 400</code></a></li>\n<li><a href=\"#g-04-using-storage-instead-of-memory-for-structsarrays-saves-gas\">G-04 Using storage instead of memory for structs/arrays saves gas</a></li>\n<li><a href=\"#g-05-require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function-also-restructured-some-ifs\">G-05 require() or revert() statements that check input arguments should be at the top of the function (Also restructured some if’s)</a></li>\n<li><a href=\"#g-06-keccak256-should-only-need-to-be-called-on-a-specific-string-literal-once\">G-06 <code>keccak256()</code> should only need to be called on a specific string literal once</a></li>\n<li><a href=\"#g-07-x--y-costs-more-gas-than-x--x--y-for-state-variables\">G-07 <code>x += y</code> costs more gas than <code>x = x + y</code> for state variables</a></li>\n<li><a href=\"#g-08-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">G-08 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#g-09-using-unchecked-blocks-to-save-gas\">G-09 Using unchecked blocks to save gas</a></li>\n<li><a href=\"#g-10-splitting-require-statements-that-use--saves-gas---saves-8-gas-per-\">G-10 Splitting require() statements that use &#x26;&#x26; saves gas - (saves 8 gas per &#x26;&#x26;)</a></li>\n<li><a href=\"#g-11-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\">G-11 Duplicated require()/revert() checks should be refactored to a modifier or function</a></li>\n<li><a href=\"#g-12-a-modifier-used-only-once-and-not-being-inherited-should-be-inlined-to-save-gas\">G-12 A modifier used only once and not being inherited should be inlined to save gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}
